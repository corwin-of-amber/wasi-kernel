/**
 * Generates small WASM binaries that are used as glue code when
 * a JS callback is dynamically requested from a WASM instance,
 * e.g. via `dlsym`.
 */


class GlueCompiler {
    
    async init() {
        this.wabt = await require('wabt')();
    }

    createAll(min_arity, max_arity) {
        var all = {};
        for (let i = min_arity; i < max_arity; i++)
            all[i] = this.create(i);
        return all;
    }

    /**
     * Generates a function `i32 glue(i32 a1, ..., i32 an)` that proxies
     * an imported JS function (the "delegate").
     * @param {number} arity number of parameters
     * @returns {number[]} compiled WASM binary
     */
    create(arity) {
        var params = arity ? `(param ${' i32'.repeat(arity)})` : '',
            args = Array(arity).fill(1).map((_, i) => `local.get ${i}`).join('\n');
        return this.compile(GlueCompiler.TEMPLATE
            .replace('(;PARAMS;)', params)
            .replace('(;ARGS;)', args));
    }

    compile(wat) {
        var wasm = this.wabt.parseWat('inline', wat);
        return [...wasm.toBinary({}).buffer];
    }

    static TEMPLATE = `
      (module
        (type (;0;) (func (;PARAMS;) (result i32)))
        
        (import "env" "delegate" (func $delegate (type 0)))
        (func (export "glue") (type 0)
          (;ARGS;)
          call $delegate
        )
      )`
}


async function main() {
    var c = new GlueCompiler;
    await c.init();

    var out = c.createAll(0, 10);

    const fs = require('fs');
    fs.writeFileSync('src/kernel/bits/autogen/delegation.ts',
        `/* generated by autogen-delegation.js */\n` +
        `export default ${JSON.stringify(out)}`);
}


main();